#!/bin/bash
#
# Test of the variables and PATH for qsub:
#
# Only print a test.
#
# https://github.com/MICA-MNI/micaopen/templates
#
#   ARGUMENTS order:
#   $1 : BIDS directory
#   $2 : participant
#   $3 : Out parcDirectory
#

BIDS=$1
id=$2
out=$3
SES=$4
nocleanup=$5
threads=$6
tmpDir=$7
changeTopupConfig=$8
changeIcaFixTraining=$9
thisMainScan=${10}
thisPhase=${11}
smooth=${12}
PROC=${13}
here=$(pwd)
export OMP_NUM_THREADS=$threads

#------------------------------------------------------------------------------#
# qsub configuration
if [ "$PROC" = "qsub-MICA" ] || [ "$PROC" = "qsub-all.q" ];then
    export MICAPIPE=/data_/mica1/01_programs/micapipe
    source ${MICAPIPE}/functions/init.sh;
fi

# source utilities
source $MICAPIPE/functions/utilities.sh
tmp=${tmpDir}/${RANDOM}_micapipe-test_${id}

# Assigns variables names
bids_variables "$BIDS" "$id" "$out" "$SES"
echo -e "
BIDS     = $BIDS
id       = $id
out      = $out
ses      = $SES
PROC     = $PROC
tmpDir   = $tmpDir
tmp      = $tmp
MICAPIPE = $MICAPIPE
subject_bids = $subject_bids"

#------------------------------------------------------------------------------#
Title "Running MICA qsub test"

#	Timer
aloita=$(date +%s)

# Create script specific temp directory
Do_cmd mkdir -p $tmp

# TRAP in case the script fails
trap 'cleanup $tmp $nocleanup $here' SIGINT SIGTERM

# GLOBAL variables for this script
Info "Saving temporal dir: $nocleanup"
Info "ANTs will use $threads threads"

# Freesurface SUBJECTs directory
export SUBJECTS_DIR=${dir_surf}
cd $tmp
Title ">>> PATHS and Global variables <<<"
Info "Software paths"
Note "User              =" "$(whoami)"
Note "Workstation       =" "$(uname -n)"
Note "SHELL             =" $SHELL
Note "MICAPIPE          =" $MICAPIPE
Note "AFNIDIR           =" $AFNIDIR
Note "ANTSPATH          =" $ANTSPATH
Note "MRtrix3 bin       =" "$(which mrinfo)"
Note "wb_command        =" "$(which wb_command)"
Note "FREESURFER_HOME   =" $FREESURFER_HOME
Note "FSLDIR            =" $FSLDIR
Note "FSL_BIN           =" $FSL_BIN
Note "FIXPATH           =" $FIXPATH
Note "FSLPARALLEL       =" $FSLPARALLEL

Info "python: $(python --version)"
Note "PYTHONPATH        =" $PYTHONPATH
Note "PYTHONHOME        =" $PYTHONHOME
Note "LC_ALL            =" $LC_ALL
Note "LANG              =" $LANG
Note "LD_LIBRARY_PATH   =" $LD_LIBRARY_PATH

Info "Global variables"
Note "tmp               =" $tmp
Note "threads           =" $threads
Note "OMP_NUM_THREADS   =" $OMP_NUM_THREADS
Note "NSLOTS            =" $NSLOTS
Note "PROC              =" $PROC

# Main scan
N_mainScan=${#bids_mainScan[@]}
if [ $N_mainScan -gt 1 ]; then
    if [[ ${thisMainScan} == "DEFAULT" ]]; then
        Error "Multiple func runs found in BIDS rawdata directory! Please specify which run should be processed using flag -mainScanRun"; exit;
    elif [ $thisMainScan -gt $N_mainScan ]; then
        Warning "Specified run number ($thisMainScan) is greater than number of func scans scans found ($N_mainScan). Using first filename in list as default";
        mainScan=${bids_mainScan[0]}
    else
        Info "Found $N_mainScan func scans, processing specified scan # $thisMainScan"
        mainScan=${bids_mainScan[$thisMainScan-1]}
    fi
else
    mainScan=${bids_mainScan[0]}
    if [[ "$thisMainScan" == "DEFAULT" ]]; then
        Info "No run number specified for func scan and did not find more than one run for main scan - all good!"
    else
        if [ $thisMainScan -gt $N_mainScan ]; then
            Warning "Found one or less func scan, but specified run number = $thisMainScan). Using first filename in list as default";
        fi
    fi
fi

# Main scan json
N_mainScanJson=${#bids_mainScanJson[@]}
if [ $N_mainScanJson -gt 1 ]; then
    if [[ ${thisMainScan} == "DEFAULT" ]]; then
        Error "Found multiple .json files for main func scan in BIDS rawdata directory! Please specify which run should be processed using flag -mainScanRun"; exit;
    elif [ $thisMainScan -gt $N_mainScanJson ]; then
        Warning "Specified run number ($thisMainScan) is greater than number of func json files found for main scan ($N_mainScan). Using first filename in list as default";
        mainScanJson=${bids_mainScan[0]}
    else
        Info "Found $N_mainScanJson func scan json files, using specified run # $thisMainScan"
        mainScanJson=${bids_mainScanJson[$thisMainScan-1]}
    fi
else
    Info "Using default json scan: ${bids_mainScanJson[0]}"
    mainScanJson=${bids_mainScanJson[0]}
fi

# Phase encoding
N_mainPhase=${#bids_mainPhase[@]}
N_revPhase=${#bids_reversePhase[@]}
if [ $N_mainPhase -gt 1 ] || [ $N_revPhase -gt 1 ]; then
    if [[ ${thisPhase} == "DEFAULT" ]]; then
        Error "Found multiple phase reversal runs in BIDS rawdata directory! Please specify which run should be processed using flag -phaseReversalRun"; exit;
    elif [ $thisPhase -gt $N_mainPhase ] || [ $thisPhase -gt $N_revPhase ]; then
        Warning "Specified run number ($thisPhase) is greater than number of phase reversal scans scans found ($N_mainPhase and $N_revPhase). Using first filename in list as default";
        mainPhaseScan=${bids_mainPhase[$thisPhase-1]}
        reversePhaseScan=${bids_reversePhase[$thisPhase-1]}
    else
        Info "Found $N_mainPhase and $N_revPhase phase reversal scans, processing specified scan # $thisPhase"
        mainPhaseScan=${bids_mainPhase[$thisPhase-1]}
        reversePhaseScan=${bids_reversePhase[$thisPhase-1]}
    fi
else
    mainPhaseScan=${bids_mainPhase[0]}
    reversePhaseScan=${bids_reversePhase[0]}
    if [[ "$thisPhase" == "DEFAULT" ]]; then
        Info "No run number specified for phase reversals and did not find more than one phase reversal scan - all good!"
    else
        if [ $thisPhase -gt $N_mainPhase ] || [ $thisPhase -gt $N_revPhase ]; then
            Warning "Specified run number ($thisPhase) is greater than number of phase reversal scans scans found ($N_mainPhase and $N_revPhase). Using first filename in list as default"; fi
    fi
fi

# print the names on the terminal
bids_print.variables
bids_print.variables-func
bids_print.variables-post

#    PACKAGES DEPENDENCIES print versions
# Dicom to nifti X converter
if [[ -z $(which dcm2niix) ]]; then Error "Check your dcm2niix installation"; else Info "dcm2niix was found"; fi
# tree display
if [[ -z $(which tree) ]]; then Warn "tree function was not found"; else Info "tree version: $(tree --version | awk '{print $2}')"; fi
#  MRtrix3
if [[ -z $(which mrinfo) ]]; then Error "MRtrix3 was not found"; else Info "MRtrix3 version: $(mrinfo -version | awk 'NR==1 {print $3}')"; fi
# freesurfer
if [[ -z $(which recon-all) ]]; then Error "FreeSurfer was not found"; else Info "FreeSurfer version: $(recon-all -version)"; fi
# FSL
if [[ -z $(which flirt) ]]; then Error "FSL was not found"; else Info "FSL version: $(flirt -version | awk '{print $3}')"; fi
# AFNI
if [[ -z $(which 3dresample) ]]; then Error "AFNI was not found"; else Info "AFNI version: $(afni -version | awk -F ':' '{print $2}')"; fi
# ANTSx
if [[ -z $(which antsRegistration) ]]; then Error "ANTs was not found"; else Info "ANTS version: $(antsRegistration --version | awk -F ':' 'NR==1{print $2}')"; fi
# workbench
if [[ -z $(which wb_command) ]]; then Error "WorkBench was not found"; else Info "workbench version: $(wb_command -version | awk 'NR==3{print $2}')"; fi
# fix
if [[ -z $(which fix) ]]; then Warning "fix was not found, ICA-FIX will be skipped"; else Info "ICA-based Xnoiseifier was found here: $(which fix)"; fi
# R
if [[ -z $(which R) ]]; then Warning "R was not found"; else Info "R was found here: $(which R), version $(R --version | awk 'NR==1{print $3}')"; fi


# print the names on the terminal
Info "BIDS variables for DWI, test get info"
bids_print.variables-dwi

# Concatenate shells -if only one shell then just convert to mif and rename.
for dwi in ${bids_dwis[@]}; do
      dwi_nom=$(echo $dwi | awk -F "dwi/" '{print $2}' | awk -F ".nii" '{print $1}')
      bids_dwi_str=$(echo $dwi | awk -F . '{print $1}')
      Do_cmd mrconvert $dwi -json_import ${bids_dwi_str}.json -fslgrad ${bids_dwi_str}.bvec ${bids_dwi_str}.bval ${tmp}/${dwi_nom}.mif
done
# Concatenate shells and convert to mif.
dwi_cat=${tmp}/dwi_concatenate.mif
Do_cmd mrcat ${tmp}/*.mif $dwi_cat -nthreads $threads

# Get parameters
ReadoutTime=$(mrinfo $dwi_cat -property TotalReadoutTime)
pe_dir=$(mrinfo $dwi_cat -property PhaseEncodingDirection)

Info "dwifslpreproc parameters:"
Note "Shell values        :" "$(mrinfo $dwi_cat -shell_bvalues)"
Note "DWI main dimensions :" "$(mrinfo $dwi_cat -size)"
Note "DWI shell values    :" "$(mrinfo $dwi_cat -shell_bvalues)"
Note "pe_dir              :" $pe_dir
Note "Readout Time        :" $ReadoutTime

# QC notification of completition
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=$(echo print $eri/60 | perl)

echo -e "\n\n${id}, ${SES}, MICAq-TEST, DONE, $(whoami), $(uname -n), $(date), $(printf "%0.3f\n" ${eri}), $PROC" #>> "${out}/brain-proc.csv"
Title "Running MICA qsub test ended in \033[38;5;220m $(printf "%0.3f\n" ${eri}) minutes \033[38;5;141m"
cleanup "$tmp" "$nocleanup" "$here"
