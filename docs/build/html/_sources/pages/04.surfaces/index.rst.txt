.. _surfaces:

.. title:: Visualization

*********************
Surface visualization
*********************

This section describes where are the main surfaces generated by the pipeline, and how you can visualized them using python or R.
This example will use the subject ``HC001``, session `01` from the MICs dataset, and all paths will be relative to the subject directory or ``out/micapipe/sub-HC001_ses01/``

On the following examples we'll load and visualize a single subject surfaces.
The subject surfaces are distributed through different directories, they look like:

.. parsed-literal::

    sub-HC001/
    └── ses-01
        ├── anat
        │   └── surfaces
        │       ├── **conte69          # conte69 surfaces**
        │       ├── **micro_profiles   # MPC connectomes and surfaces**
        │       └── **morphology       # Thickness and curvature surfaces**
        └── func
            └── **surfaces             # rsfMRI surfaces and connectomes**

Each native surface parcellation is found inside the subject's freesurfer directory and contains the string ``mics.annot``:

.. parsed-literal::

    freesurfer/
    └── sub-S03_ses-SES01
        └── label
            ├── lh.schaefer-400_mics.annot
            └── rh.schaefer-400_mics.annot


This example uses the packages ``nilearn``, ``numpy`` and ``matplotlib`` for **python**.
**R** uses the libraries ``RColorBrewer`` and ``viridis``.
The first step in both languages is to set the environment:

.. tabs::

   .. code-tab:: py

    # Set the environment
    import numpy as np
    from nilearn import plotting
    import matplotlib as plt

    # This variable will be different for each subject
    subjectID = 'sub-HC001_ses-01'

    # Here we define the atlas
    atlas = 'schaefer-400'

   .. code-tab:: r R

    # Set the environment
    library("RColorBrewer")
    library("viridis")

    # Set the working directory to your subjec's directory
    setwd("out/micapipe/sub-HC001/ses-01")

    # This variable will be different for each subject
    subjectID <- 'sub-HC001_ses-01'

    # Here we define the atlas
    atlas <- 'schaefer-400'

Morphology
========================================================

Thickness
--------------------------------------------------------

Thickness: Native surface
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Thickness: fsaverage5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Thickness: conte 69
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Curvature
--------------------------------------------------------

Curvature: Native surface
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Curvature: fsaverage5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Curvature: conte 69
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface


Smoothed
--------------------------------------------------------

Thickness fsaverage5 fwhm=10mm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Thickness conte69 fwhm=10mm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Curvature fsaverage5 fwhm=10mm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Curvature conte69 fwhm=10mm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface


Conte 69
========================================================

Conte 69: Pial surface
--------------------------------------------------------

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Conte 69: Middle surface
--------------------------------------------------------

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Conte 69: White surface
--------------------------------------------------------

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Native sphere
--------------------------------------------------------

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

rsfMRI on surface
========================================================

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

MPC native surface
========================================================

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface

Schaefer-400 labels
========================================================

.. tabs::

   .. code-tab:: py

    # Load the surface

   .. code-tab:: r R

    # Load the surface


Download code examples: Surfaces
--------------------------------------------------------

:download:`Python Jupyter notebook: 'tutorial_surface_visualization.ipynb' <tutorial_surface_visualization.ipynb>`

:download:`R source code: 'tutorial_surface_visualization.R' <tutorial_surface_visualization.R>`
